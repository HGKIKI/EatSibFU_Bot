using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using VkNet.Abstractions;
using VkNet.Model;
using VkNet.Model.RequestParams;
using VkNet.Utils;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using VkNet.Model.Keyboard;
using System.Drawing;
using VkNet.Enums.SafetyEnums;
using DAL1;


namespace EatSibFU_Bot.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CallbackController : ControllerBase
    {
        public void SendMessage(long? PeerId, string Text, MessageKeyboard keyboard = null)
        {

            _vkApi.Messages.Send(new MessagesSendParams
            {
                RandomId = new Random().Next(999999),
                PeerId = PeerId,
                Message = Text,
                Keyboard = keyboard
            });
        }

        /// <summary>
        /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private readonly IConfiguration _configuration;

        private readonly IVkApi _vkApi;

        public CallbackController(IVkApi vkApi, IConfiguration configuration)
        {
            _vkApi = vkApi;
            _configuration = configuration;
        }

        [HttpPost]
        public IActionResult Callback([FromBody] Updates updates)
        {



            DAL D = new DAL();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ "type" 

            switch (updates.Type)
            {

                case "message_new":
                    {

                        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è

                        var msg = Message.FromJson(new VkResponse(updates.Object));
                        if (msg.Payload != null)
                        {
                            switch (msg.Text)
                            {

                                case "–ù–∞—á–∞—Ç—å":
                                    {

                                        KeyboardBuilder key = new KeyboardBuilder(isOneTime: false);
                                        key.AddButton("–ö–æ—Ä–∑–∏–Ω–∞ &#128722;", "");
                                        key.AddButton("–í—ã–±—Ä–∞—Ç—å –±—É—Ñ–µ—Ç &#127860;", "");
                                        MessageKeyboard keyboard = key.Build();
                                        SendMessage(msg.PeerId, "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è?", keyboard);
                                        break;
                                    }
                                case "–í—ã–±—Ä–∞—Ç—å –±—É—Ñ–µ—Ç üç¥":
                                    {
                                        var CanteenList = D.GetCanteen().Result;
                                        KeyboardBuilder key = new KeyboardBuilder(isOneTime: false);
                                        key.AddButton("1. –ë—É—Ñ–µ—Ç –ò–ö–ò–¢", "", KeyboardButtonColor.Positive).AddLine();
                                        key.AddButton("2. –ë—É—Ñ–µ—Ç –ü–ò", "", KeyboardButtonColor.Positive).AddLine();
                                        key.AddButton("3. –ë—É—Ñ–µ—Ç –ò–ù–∏–ì", "", KeyboardButtonColor.Positive).AddLine();
                                        MessageKeyboard keyboard = key.Build();
                                        string str = "";
                                        int count = 1;
                                        foreach (Canteen canteen in CanteenList)
                                        {
                                            str += $"{count++}. {canteen.Name}\n";
                                        }
                                        SendMessage(msg.PeerId, str, keyboard);
                                        break;
                                    }
                                case "1. –ë—É—Ñ–µ—Ç –ò–ö–ò–¢":
                                    {
                                        D.ChooseCanteen("–ë—É—Ñ–µ—Ç –ò–ö–ò–¢", msg.PeerId);
                                      
                                        break;
                                    }
                                case "2. –ë—É—Ñ–µ—Ç –ü–ò":
                                    {
                                        D.ChooseCanteen("–ë—É—Ñ–µ—Ç –ü–ò", msg.PeerId);
                                        break;
                                    }
                                case "3. –ë—É—Ñ–µ—Ç –ò–ù–∏–ì":
                                    {
                                        D.ChooseCanteen("–ë—É—Ñ–µ—Ç –ò–ù–∏–ì", msg.PeerId);
                                        break;
                                    }


                            }
                        }
                        else
                            SendMessage(msg.PeerId, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥—ã –≤—ã–±–æ—Ä—ã. –ö–Ω–æ–ø–æ—á–∫–∏.");
                        break;
                    }
                // –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                case "confirmation":
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
                    return Ok(_configuration["Config:Confirmation"]);


            }
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "ok" —Å–µ—Ä–≤–µ—Ä—É Callback API
            return Ok("ok");
        }
    }
}